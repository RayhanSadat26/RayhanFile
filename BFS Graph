#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_VERTICES 100
typedef struct {
    int items[MAX_VERTICES];
    int front, rear;
} Queue;
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}
bool isQueueEmpty(Queue* q) {
    return (q->front == -1);
}
void enqueue(Queue* q, int value) {
    if (q->rear == MAX_VERTICES - 1)
        printf("Queue overflow\n");
    else {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}
int dequeue(Queue* q) {
    if (isQueueEmpty(q)) {
        printf("Queue underflow\n");
        return -1;
    } else {
        int item = q->items[q->front];
        if (q->front >= q->rear)
            q->front = q->rear = -1;
        else
            q->front++;
        return item;
    }
}

void BFS(int graph[MAX_VERTICES][MAX_VERTICES], int start, int n) {
    bool visited[MAX_VERTICES] = {false};
    Queue q;
    initQueue(&q);
    visited[start] = true;
    enqueue(&q, start);

    printf("BFS Traversal starting from node %d:\n", start);

    while (!isQueueEmpty(&q)) {
        int current = dequeue(&q);
        printf("%d ", current);
        for (int i = 0; i < n; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                visited[i] = true;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

int main() {
    int n, start;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    int graph[MAX_VERTICES][MAX_VERTICES] = {0};
    printf("Enter the adjacency matrix (0 or 1):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &start);
    BFS(graph, start, n);

    return 0;
}
